control键和caps_lock 切换
[url:https://blog.csdn.net/u014717036/article/details/57082204]
创建自己的映射表并且把它储存在你的home目录下
> xmodmap -pke > ~/.Xmodmap

将CapsLock映射成Control, Shift+CapsLock映射成CapsLock
在 ~/.Xmodmap文件最后添加下面几句：

clear lock
clear control
add control = Caps_Lock Control_L Control_R
keycode 66 = Control_L Caps_Lock NoSymbol NoSymbol

测试改动是否生效
> xmodmap ~/.Xmodmap

要在启动Xorg时激活你自己的映射表
在~/.xinitrc文件末尾添加下面内容

if [ -f $HOME/.Xmodmap ]; then
    /usr/bin/xmodmap $HOME/.Xmodmap
fi

===================
启动Vim

vim + file: 从文件的末尾开始；
vim +num file: 从第num行开始；
vim +/string file: 打开file，并将光标停留在第一个找到的string上。

vim -c cmd file: 在打开文件前，先执行指定的命令；
vim -r file: 恢复上次异常退出的文件；
vim -R file: 以只读的方式打开文件，但可以强制保存；
vim -M file: 以只读的方式打开文件，不可以强制保存；
vim -y num file: 将编辑窗口的大小设为num行；
vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件

===================
翻屏
ctrl+f: 下翻一屏。
ctrl+b: 上翻一屏。
ctrl+d: 下翻半屏。
ctrl+u: 上翻半屏。
ctrl+e: 向下滚动一行。
ctrl+y: 向上滚动一行。
n%: 到文件n%的位置。
zz: 将当前行移动到屏幕中央。
zt: 将当前行移动到屏幕顶端。
zb: 将当前行移动到屏幕底端。

===================
标记
使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。

m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。
m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
`{a-z}: 移动到标记位置。
‘{a-z}: 移动到标记行的行首。
`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
“: 移动到上次编辑的位置。”也可以，不过“精确到列，而”精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
`”: 移动到上次离开的地方。
`.: 移动到最后改动的地方。
:marks 显示所有标记。
:delmarks a b – 删除标记a和b。
:delmarks a-c – 删除标记a、b和c。
:delmarks a c-f – 删除标记a、c、d、e、f。
:delmarks! – 删除当前缓冲区的所有标记。
:help mark-motions 查看更多关于mark的知识

0-9 A-Z 大写字母标记为全局标记
a-z 小写字母标记为文件内标记
`' 跳转前的位置
`" 跳转后的位置
`[ 最后修改的位置的开头 
`] 最后修改的位置的结尾

===================
 改写插入
c[n]w: 改写光标后1(n)个词。
c[n]l: 改写光标后n个字母。
c[n]h: 改写光标前n个字母。
[n]cc: 修改当前[n]行。
[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
[n]S: 删除指定数目的行，并以所输入文本代替之。

===================
移动和复制 （move and copy）
[range]mo [address]  如 8mo 9 或者 7,8mo 9 移动 8行到9行或者 移动7-8行到9行
[range]co [address]  同上


===================
文本对象
aw：一个词
as：一句。
ap：一段。
ab：一块（包含在圆括号中的）。

===================
vim的好用之处很多是因为插件，使用一个好的插件管理是必不可少的，我平常使用Vundle.vim进行插件管理 
vundle 搭建很方便：

git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
修改 .vimrc
打开vim在底行模式下输入 BundleInstall
如果还需要其他插件，可以使用BundleSearch 进行在线查找插件

--------------------- 
快速对引号或括号等标点内的内容进行选中、删除、复制操作的超级技巧。可以极大的提高编辑效率。

以下命令可以对标点内的内容进行操作。
ci'、ci"、ci(、ci[、ci{、ci< - 分别更改这些配对标点符号中的文本内容
di'、di"、di(或dib、di[、di{或diB、di< - 分别删除这些配对标点符号中的文本内容
yi'、yi"、yi(、yi[、yi{、yi< - 分别复制这些配对标点符号中的文本内容
vi'、vi"、vi(、vi[、vi{、vi< - 分别选中这些配对标点符号中的文本内容

另外如果把上面的i改成a可以连配对标点一起操作。

举个例子：

比如要操作的文本如下：

111"222"333
111"222"333

将光标移到"222"的任何一个字符处输入命令 di" ,文本会变成： 111""333

若输入命令 da" ,文本会变成： 111333

===================
代码块折叠
VIM代码折叠方式可以用"foldmethod"选项来设置，如: set foldmethod=indent

有6种方式来折叠代码
    1. manual //手工定义折叠
    2. indent //用缩进表示折叠
    3. expr　 //用表达式来定义折叠
    4. syntax //用语法高亮来定义折叠
    5. diff   //对没有更改的文本进行折叠
    6. marker //用标志折叠
    
indent 折叠指令
    za 打开或关闭当前折叠;
    zM 关闭所有折叠
    zR 打开所有折叠
indent方式，vim会自动利用缩进进行折叠，我们可以使用现成的折叠成果．
我们可以在(括号)折叠处输入以下命令：

    zc 折叠
    zC 对所在范围内所有嵌套的折叠点进行折叠
    zo 展开折叠
    zO 对所在范围内所有嵌套的折叠点展开
    [z 到当前打开的折叠的开始处。
    ]z 到当前打开的折叠的末尾处。
    zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
    zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。
 

vim 配置文件分为全局配置文件和用户配置文件

1. 全局配置文件查找，在.vim 中输入:echo $VIM,一般为：/usr/share/vim/vimrc
2. 用户配置文件在用户主目录下，如：/home/abeen/.vimrc

在vimrc文件中设置折叠方式：如set foldmethod=indent

 

选定折叠方式后，就可以使用折叠命令进行折叠操作了．常用的折叠方式为indent和marker．

indent折叠命令

操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠

indent方式，vim会自动利用缩进进行折叠，我们可以使用现成的折叠成果．
我们可以在(括号)折叠处输入以下命令：

zc 折叠
zC 对所在范围内所有嵌套的折叠点进行折叠
zo 展开折叠
zO 对所在范围内所有嵌套的折叠点展开
[z 到当前打开的折叠的开始处。
]z 到当前打开的折叠的末尾处。
zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。

 

marker折叠命令
marker折叠方式时，我们需要用标计来标识代码的折叠，系统默认是{{{和}}}
折叠命令

zf　创建折叠，比如在marker方式下：
        zf56G，创建从当前行起到56行的代码折叠；
        10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
        10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
        在括号处zf%，创建从当前行起到对应的匹配的括号上去（（），{}，[]，<>等）。
zd  删除 (delete) 在光标下的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker"
时有效。
zD  循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。仅当 'foldmethod' 设为
"manual" 或 "marker" 时有效。
zE  除去 (Eliminate) 窗口里“所有”的折叠。仅当 'foldmethod' 设为 "manual" 或
"marker" 时有效。

[https://pic002.cnblogs.com/img/abeen/201008/2010080620260412.jpg]

============================
多选,替换
v选中，ctrl + n  选取增加下一个相同的词
语法为 
    :[addr]s/源字符串/目的字符串/[option]
全局替换命令为
    :%s/源字符串/目的字符串/g

[addr] 表示检索范围，省略时表示当前行。
    “1,20” ：表示从第1行到20行；
    “%” ：表示整个文件，同“1,$”；
    “. ,$” ：从当前行到文件尾；

s : 表示替换操作
 
[option] : 表示操作类型
    g 表示全局替换; 
    c 表示进行确认
    p 表示替代结果逐行显示（Ctrl + L恢复屏幕）;
    省略option时仅对每行第一个匹配串进行替换;
    如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义 如 \t


下面是一些例子：
==================================================
#将That or this 换成 This or that
:%s/\(That\) or \(this\)/\u\2 or \l\1/

=======================================================
#将句尾的child换成children
:%s/child\([ ,.;!:?]\)/children\1/g

=======================================================
#将mgi/r/abox换成mgi/r/asquare
:g/mg\([ira]\)box/s//mg//my\1square/g    <=>  :g/mg[ira]box/s/box/square/g

=======================================================
#将多个空格换成一个空格
:%s/  */ /g

=======================================================
#使用空格替换句号或者冒号后面的一个或者多个空格
:%s/\([:.]\)  */\1 /g

=======================================================
#删除所有空行
:g/^$/d

=======================================================
#删除所有的空白行和空行
:g/^[  ][  ]*$/d

=======================================================
#在每行的开始插入两个空白
:%s/^/>  /

=======================================================
#在接下来的6行末尾加入.
:.,5/$/./

=======================================================
#颠倒文件的行序
:g/.*/m0O  <=> :g/^/m0O

=======================================================
#寻找不是数字的开始行,并将其移到文件尾部
:g!/^[0-9]/m$ <=> g/^[^0-9]/m$

=======================================================
#将文件的第12到17行内容复制10词放到当前文件的尾部
:1,10g/^/12,17t$
~~~~重复次数的作用

=======================================================
#将chapter开始行下面的第二行的内容写道begin文件中
:g/^chapter/.+2w>>begin

=======================================================
:/^part2/,/^part3/g/^chapter/.+2w>>begin

=======================================================
:/^part2/,/^part3/g/^chapter/.+2w>>begin|+t$
@see https://www.cnblogs.com/beenoisy/p/4046074.html

===================================
===================================
===================================
===================================
vim ctrl+s 就死

由于windows下编程习惯了保存就ctrl+s，在vim下ctrl+s整个putty终端就死了，遇到好几次这种情况，网上查了下原来ctrl+s在LINUX里是锁定屏幕的快捷键，解锁ctrl+q就可以了


=========================
设置tab缩进为4个空格set tabstop=4

=========================
大小写转换

1.  单个字符的处理
    ~：切换光标所在位置的字符的大小写形式，大写转换为小写，小写转换为大写
    3~：将光标位置开始的3个字母改变其大小写

2. 文本整体的处理
    gu：切换为小写，gU：切换为大写，剩下的就是对这两个命令的限定（限定行字母和单词）等等。

2.1 整篇文章

无须进入命令行模式，键入：

    ggguG：整篇文章转换为小写，gg：文件头，G：文件尾，gu：切换为小写
    gggUG：整篇文章切换为大写，gg：文件头，G：文件尾，gU：切换为大写

2.2 只转化某个单词
    guw、gue
    gUw、gUe
    gu5w：转换 5 个单词
    gU5w

2.3 转换行
    gU0        ：从光标所在位置到行首，都变为大写
    gU$        ：从光标所在位置到行尾，都变为大写
    gUG        ：从光标所在位置到文章最后一个字符，都变为大写
    gU1G      ：从光标所在位置到文章第一个字符，都变为大写

[https://blog.csdn.net/lanchunhui/article/details/51542211]


=========================================

NERDTree 常用快捷键
打开: o ; 打开不跳转到窗口 go ;支持文件,目录或书签
O 递归打开选中 结点下的所有目录
x 合拢选中结点的父目录
X 递归 合拢选中结点下的所有目录
t 在新 Tab 中打开选中文件/书签，并跳到新 Tab
T 在新 Tab 中打开选中文件/书签，但不跳到新 Tab
i split 一个新窗口打开选中文件，并跳到该窗口
gi split 一个新窗口打开选中文件，但不跳到该窗口
s vsplit 一个新窗口打开选中文件，并跳到该窗口
gs vsplit 一个新 窗口打开选中文件，但不跳到该窗口

书签功能
//Ctrl + j k h l 当前目录首个 or 末尾文件,根目录首 or 尾文件
常见快捷键
？： 快速帮助文档
o： 打开一个目录或者打开文件，创建的是buffer，也可以用来打开书签
go： 打开一个文件，但是光标依然在NERDTree上，创建的是buffer
t： 打开一个文件，创建的是Tab，对书签依然有效
T： 打开一个文件，但是光标依然在NERDTree上，创建的是Tab，对书签同样有效
i: 水平分割创建文件的窗口，创建的是 buffer
gi: 水平分割创建文件的窗口，但是光标仍然留在 NERDTree
s: 垂直分割创建文件的窗口，创建的是 buffer

分割窗口并复制
-垂直分割
CTRL-W CTRL-V						
CTRL-W v						

CTRL-W s						*CTRL-W_s*
CTRL-W S						*CTRL-W_S*
CTRL-W CTRL-S						*CTRL-W_CTRL-S*

gs: 和 gi，go 类似
: 收起当前打开的目录
X: 收起所有打开的目录
e: 以文件管理的方式打开选中的目录
D: 删除书签
P: 大写，跳转到当前根路径
p: 小写，跳转到光标所在的上一级路径
K: 跳转到第一个子路径
J: 跳转到最后一个子路径
<C-j> 和 <C-k>: 在同级目录和文件间移动，忽略子目录和子文件
C: 将根路径设置为光标所在的目录
u: 设置上级目录为根路径
U: 设置上级目录为跟路径，但是维持原来目录打开的状态
r: 刷新光标所在的目录
R: 刷新当前根路径
I: 显示或者不显示隐藏文件
f: 打开和关闭文件过滤器
q: 关闭 NERDTree
A: 全屏显示 NERDTree，或者关闭全屏
=========================================
window窗口操作
:sp 水平切割
:vsp 垂直切割
:res[ize] N 设置高度,单位行数
:vertical res N 设置宽度,单位行数
:res[ize] = 重置窗口大小
:only 关闭其他窗口

缓冲区 
:ls[!] [flags]              :ls :buffers 缓冲区列表 
[flags] 
    +   修改缓冲区
    -   不可修改缓冲区
    =   只读缓冲器
    a   活跃缓冲区
    u   未列出的缓冲区 (overrides the "!")
    h   隐藏缓冲区 hidden buffers
    x   缓冲区有读错误 buffers with a read error
    %   当前缓冲区 current buffer
    #   轮换文件缓冲区 alternate buffer
可组合使用:
    h+ 被修改的隐藏缓冲区
    a+ 被修改的活动缓冲区

切换当前缓冲区文件
    :b 缓冲区id 
    :buffer 缓冲区id
    缓冲区id C-6
    前后缓冲区文件切换 C-6

关闭缓冲区
    :[N]bun[load][!]            :bun :bunload 
    :bun[load][!] [N]   默认关闭当前缓冲区
删除缓冲区
    :bdelete N1,N2,N3    :bd[N] 删除编号为N的缓冲区
    :N,M bdelete         :5,10bd 删除5-10的缓冲区

其他快捷操作:
    :br[ewind][!] [+cmd] 转到第一个缓冲区
    :bf[irst] [+cmd] 同上
    :sbr[ewind] [+cmd] 切割窗口并转到第一个缓冲区
    :sbf[irst] [+cmd] 同上
    :bl[ast][!] [+cmd] 最后一个
    :sbl[ast] [+cmd] 切割窗口并转到最后一个缓冲区

切换文件
crtl + ^
+cmd 可用于将光标定位在新打开的文件中,或执行任何其他命令:
    +          从最后一行开始。
    +{num}     从第{num}行开始。
    +/{pat}    从包含{pat}的第一行开始。
    +{command} 打开新文件后执行{command}。
               {command}是任何Ex命令。
转义字符 \
    :edit  +/The\ book           file                       
    :edit  +/dir\ dirname\\      file                       
    :edit  +set\ dir=c:\\\\temp  file       
请注意最后一样的\,set是命令需要\ 转义空格
==========================================


切换标签页

:tabnew [++opt选项] ［＋cmd］ 文件 建立对指定文件新的tab
:tabc 关闭当前的 tab
:tabo 关闭所有其他的 tab
:tabs 查看所有打开的 tab
:tabp 前一个 tab
:tabn 后一个 tab
标准模式下：
gT 前一个 tab
gt 后一个 tab


=========================================

搜索:

:set ignorecase 忽略大小写
:set noignorecase 大小写敏感
:set ignorecase smartcase 搜索输入包含大写,则大小写敏感

单个模式里的大小写,这将忽略vimrc的配置
\C 敏感 \c 不敏感

[@see https://blog.csdn.net/liuhhaiffeng/article/details/52587914] 

=========================================
marks 标记
跳转到标记可以通过两种方式完成：
    1.使用 ` (反引号)
    2.使用 ' (单引号)
设置标记
    m{a-zA-Z} 在光标位置设置标记{a-zA-Z}
    m'  or  m` 设置上一个上下文标记。
    m[  or  m] 上一次修改的开始处和结尾处
    m<  or  m> 
    

=========================================
VIM编辑器使用 q{register} 寄存器功能进行宏定义
记录与回放命令，宏
    
    q{register} 启用寄存器，{register}是a~z的任意一个字母。
使用寄存器四个步骤：
    1.q{a-z}    
    2.录入你操作的命令
    3.q 保存宏
    4.使用 @{a-z} 回放你的操作宏

寄存器说明：
无论是vim内部抑或外部的复制（[y]ank）、删除（[d]elete）、粘贴（[p]ut），在vim中都是借助registers（寄存器）实现的，vim共有9类寄存器：
无名（unnamed）寄存器：""，缓存最后一次操作内容；
数字（numbered）寄存器："0 - "9，缓存最近操作内容，复制与删除有别；
行内删除（small delete）寄存器："-，缓存行内删除内容；
具名（named）寄存器："a - "z或"A - "Z，指定时可用；
只读（read-only）寄存器：":, "., "%,"#，分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；
表达式（expression）寄存器："=，只读，用于执行表达式命令；
选择及拖拽（selection and drop）寄存器："*, "+,"~，存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；
黑洞（black hole）寄存器："_，不缓存操作内容（干净删除）；
模式寄存器（last search pattern）："/，缓存最近的搜索模式。

两个特殊的剪切板
"+y 复制到系统剪切板
"+p 把系统粘贴板里的内容粘贴到vim

 vimdiff快捷命令：
]c:跳到下一个不同点
[c:跳到上一个不同点
do:从另一个文件复制当前不同行（diff obtain）
dp:复制到另一个文件（diff put）
=========================================

快捷搜索
    1.光标在单词上,按下gD,不需要选中完整单词,之后就可以n/N跳转了
    2.单词上直接按*或是#,在其他文件使用n\N即可


=========================================
代码快对其 v 选中,然后 =
int man() {

int i = 1;
 printf("d%', i);
return ;
}

执行后

int man() {

    int i = 1;
    printf("d%', i);
    return ;
}

=========================================
智能补全
Ctrl + p
Ctrl + x
Ctrl + o
Ctrl + n
=========================================
VIM 中使用 Ctrl-A 和 Ctrl-X 控制数字增减
Ctrl + a 数字递减
Ctrl + x 数字递增
=========================================
phpcomplete.vim php自动补全插件
支持命名空间
项目地址 https://github.com/shawncplus/phpcomplete.vim

常用命令:
只读文件保存命令 :w !sudo tee %

=========================================
" vim debug 插件，支持DBGP的所有语言
"Plugin 'vim-vdebug/vdebug'
开始 Debug 吧，下边的快捷键会有所帮助。

<F5>: start/run (to next breakpoint/end of script)
<F2>: step over
<F3>: step into
<F4>: step out
<F6>: stop debugging
<F7>: detach script from debugger
<F9>: run to cursor
<F10>: toggle line breakpoint
<F11>: show context variables (e.g. after "eval")
<F12>: evaluate variable under cursor
:Breakpoint <type> <args>: set a breakpoint of any type (see :help VdebugBreakpoints)
:VdebugEval <code>: evaluate some code and display the result
<Leader>e: evaluate the expression under visual highlight and display the result
To stop debugging, press <F6>. Press it again to close the debugger interface.

=======
NERDTree插件常用命令
定位当前文件目录 NERDTreeFind
书签夹,首先切换到NERDTree buffer：
    打开书签:输入B,切换开关状态，也可以通过.vimrc 配置 let NERDTreeShowBookmarks=1 默认开启书签
    增加书签:输出“Bookmark {name}” 
    
=========================================
